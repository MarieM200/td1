Marie MAGNY
	TD1 OOP

Exercice 1

2.	La ligne est complétée automatiquement par « System.out.println(); ».
3.	Eclipse va créer la fonction toString :
	public String toString() {
		// TODO Auto-generated method stub
		return super.toString();
	}
4.	Eclipse va créer la structure de la fonction main :
	public static void main(String[] args) {
		
	}
5.	Lorsque l’on fait juste ctrl + espace, cela créer la structure du constructeur de la classe. 
	Quand on tape set puis que l’on fait ctrl + espace, cela créer la fonction setter pour la variable foo.
6.	Il y a une nouvelle fenêtre qui s’ouvre :
 

Exercice 2

1.	Cela fonctionne car p est déclaré dans une méthode de la classe Point. 
	On n’a pas non plus besoin de constructeur dans la class Main pour que cela fonctionne car il y a un constructeur sous-entendu dans la class.
2.	Il faut rajouter des getters dans la méthode Point.
3.	Pour que les autres classes ne puissent pas y accéder 
4.	Un accesseur est une fonction get. On en a besoin quand on a un argument privé.
5.	Il faut supprimer la ligne Point p = new Point(); dans la méthode afficher.
6.	Il faut utiliser les this pour que cela fonctionne correctement et aussi dans le print.
7.	Il faut créer une variable statique que l’on incrémente dès que le constructeur est appelé.
8.	Le compilateur les distingue grâce aux paramètres.


Exercice 3

1.	Affiche true puis false. P1 a été créé en utilisant le = c’est donc le même objet. 
	P1 et p3 même s’ils ont les mêmes valeurs, ce sont 2 objets point différents.
3.	Ce code affiche 0 et -1. Cela veut dire que p2 se trouve à l'index 0 dans list et que p3 ne se trouve pas dans list. 
	Cependant, on a ajouté p1 et non p2 dans la list. Cette erreur est dû a fait qu'on a définie p2=p1.
	La méthode appelée est Objects.equals(o, get(i)) avec o le paramètre de indexOf().

Exercice 4

2. 	Si la capacité maximale est déjà atteinte pour un polyline, la fonction 
	add ne doit pas pouvoir ajouter de nouveau point dans l'array list.
	Pour cela, il suffit de rajouter une condition dans la fonction add en 
	se servant de la variable max.
5.	Si on rentre null comme paramètre de contains, la fonction retourne false.
	Si on fait add(null) avant, le programme retourne une erreur.
	La fonction Objects.requireNonNull est à mettre dans la fonction add pour indiquer à
	l'utilisateur qu'il ne peut pas ajouter un objet null. Si un objet null est passé
	en paramètre de la fonction add, alors une erreur NullPointerException sera levée.

Exercice 5

5.	Le programme affiche : centre : (1,1), radius : 1 centre : (1,1), radius : 2.
	Les coordonnées du centre ne sont pas les bonnes pour le 1e cercle: ce sont ceux du 2e cercle
	Cette erreur est dûe au fait qu'en appellant le translate de Point dans la fonction translate
	du cercle, c'est le point p qui est modifié et pas le cercle.
	Pour éviter cela, il faut créer que le point du centre soit unique pour chaque cercle et défini 
	directement en appelant le constructeur du cercle:
	Circle c=new Circle(new Point(1,3),1);
	Circle c2=new Circle(new Point(1,3),2);
9. 	On pourrait passer en paramètre un arraylist de cercle à la place.

Exercice 6

1.	Une bague peut hériter de la classe Cercle car elle se caractérise elle aussi par un centre 
	et un rayon.
4.	Si on ne redéfinie pas la méthode toString dans la classe Ring, c'est la méthode toString de
	la classe Circle qui est appelée.
	

